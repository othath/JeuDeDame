#include "constantes.h"

PDamier new_damier(){
    /* créé un nouveau damier et initialise toute la grille à 0 */
    PDamier d = (PDamier)malloc(sizeof(struct Damier));
    d->nb_blancs = 0;
    d->nb_noirs = 0;
    d->nb_dblanc = 0;
    d->nb_dnoir = 0;
    for(int i=0; i<LIGNES; i++){
        for(int j=0; j<COLONNES; j++){
            d->plateau[i][j] = VIDE;
        }
    }
    return d;
}

void init_damier(PDamier d){
    /* initialise le damier en placant les pions noirs et les pions blancs au bon endroit */
    d->nb_noirs=20;
    d->nb_blancs=20;
    for (int i=0; i<10; i+=2){
        /* remplissage des pions blancs */
        d->plateau[0][i]=PION_BLANC;
        d->plateau[2][i]=PION_BLANC;
        d->plateau[1][i+1]=PION_BLANC;
        d->plateau[3][i+1]=PION_BLANC;
        /* remplissage des pions noirs */
        d->plateau[7][i+1]=PION_NOIR;
        d->plateau[9][i+1]=PION_NOIR;
        d->plateau[6][i]=PION_NOIR;
        d->plateau[8][i]=PION_NOIR;
    }
}

void afficher_damier(PDamier d){
    /* affiche le damier */
    printf(" A  B  C  D  E  F  G  H  I  J \n");
    for(int i=0; i<LIGNES; i++){
        printf("------------------------------\n");
        for(int j=0; j<COLONNES; j++){
            if(d->plateau[i][j] == PION_BLANC){
                printf("%s|%i|%s",KRED,d->plateau[i][j],KNRM);
            }
            else if(d->plateau[i][j] == PION_NOIR){
                printf("%s|%i|%s",KBLU,d->plateau[i][j],KNRM);
            }
            else{
                printf("|%i|",d->plateau[i][j]);
            }
            if(j==9) printf("\t%i", i);
        }
        printf("\n");
    }
    printf("------------------------------\n");
    printf("pions blancs : %i\tdames blanches : %i\npions noirs : %i\tdames noires : %i\n",d->nb_blancs,d->nb_dblanc,d->nb_noirs,d->nb_dnoir);
}
