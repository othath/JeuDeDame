#include "deplacement.h"

int mv_normal(int code[4], PDamier damier){
    switch (damier->plateau[code[0]][code[1]]){
        case 0:
            printf("ERREUR: case de départ vide!");
            return -1;
        case 1:
            if (code[2]==code[0]+1 && (code[3]==code[1]-1 || code[3]==code[1]+1) && damier->plateau[code[2]][code[3]]==0){
                damier->plateau[code[0]][code[1]]=0;
                damier->plateau[code[2]][code[3]]=1;
                return 0;
            }
            else {
                printf("ERREUR: case d'arrivée non valide!\n");
                return -1;
            }
        case 2:
            if (code[2]==code[0]-1 && (code[3]==code[1]-1 || code[3]==code[1]+1) && damier->plateau[code[2]][code[3]]==0){
                damier->plateau[code[0]][code[1]]=0;
                damier->plateau[code[2]][code[3]]=2;
                return 0;
            }
            else {
                printf("ERREUR: case d'arrivée non valide!\n");
                return -1;
            }
        default:;
            //TODO Traiter le cas des dames
            int hg=fmin(code[0],code[1]);
            int hd=fmin(code[0],COLONNES-1-code[1]);
            int bg=fmin(LIGNES-1-code[2],code[3]);
            int bd=fmin(LIGNES-1-code[2],COLONNES-1-code[3]);
            for (int i=0; i<=hg; i++){
                if (code[0]-i==code[2] && code[1]-i==code[3] && damier->plateau[code[2]][code[3]]==0){
                    if (damier->plateau[0][1]==10){
                        damier->plateau[0][1]=0;
                        damier->plateau[2][3]=10;
                        return 0;
                    }
                    else{
                        damier->plateau[0][1]=0;
                        damier->plateau[2][3]=10;
                        return 0;
                    }
                }
            }
            for (int i=0; i<=hd; i++){
                if (code[0]-i==code[2] && code[1]+i==code[3] && damier->plateau[code[2]][code[3]]==0){
                    if (damier->plateau[0][1]==10){
                        damier->plateau[0][1]=0;
                        damier->plateau[2][3]=10;
                        return 0;
                    }
                    else{
                        damier->plateau[0][1]=0;
                        damier->plateau[2][3]=10;
                        return 0;
                    }
                }
            }
            for (int i=0; i<=bg; i++){
                if (code[0]+i==code[2] && code[1]-i==code[3] && damier->plateau[code[2]][code[3]]==0){
                    if (damier->plateau[0][1]==10){
                        damier->plateau[0][1]=0;
                        damier->plateau[2][3]=10;
                        return 0;
                    }
                    else{
                        damier->plateau[0][1]=0;
                        damier->plateau[2][3]=10;
                        return 0;
                    }
                }
            }
            for (int i=0; i<=bd; i++){
                if (code[0]+i==code[2] && code[1]+i==code[3] && damier->plateau[code[2]][code[3]]==0){
                    if (damier->plateau[0][1]==10){
                        damier->plateau[0][1]=0;
                        damier->plateau[2][3]=10;
                        return 0;
                    }
                    else{
                        damier->plateau[0][1]=0;
                        damier->plateau[2][3]=10;
                        return 0;
                    }
                }
            }
            break;
    }
}

void dame(PDamier plateau){
	for(int i=0; i<COLONNES; i++){
		if(plateau->plateau[0][i]=2){
			plateau->plateau[0][i]=20;
		}
		if(plateau->plateau[9][i]=1){
			plateau->plateau[9][i]=10;
		}
	}
}
