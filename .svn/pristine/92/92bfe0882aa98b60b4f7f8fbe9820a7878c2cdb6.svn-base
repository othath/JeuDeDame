#include "jeu.h"
#include "jeu.h"

int plusDePieces(int tour, PDamier d){
    /* vérifie si le joueur dont c'est le tour n'a plus de pièces
     * si plus de pièces RETURN 0
     * si encore des pièces RETURN -1
     */
    if(tour%2 == 0){ // vérification sur le joueur blanc
        if(d->nb_blancs == 0 && d->nb_dblanc == 0){
            return 0;
        }
    }else{ // vérif sur le joueur noir
        if(d->nb_noirs == 0 && d->nb_dnoir == 0){
            return 0;
        }
    }
    return -1;
}

int bloque(int tour ,PDamier d){
    /* vérifie si le joureur dont c'est le tour est bloqué (retourne 0) ou pas (retourne -1) */
    /* renvoie une copie du plateau du damier d à l'instant t + bordure virtuelle */
    int cdv[LIGNES+2][COLONNES+2];
    for(int i=0;i<LIGNES+2;i++){
        for(int j=0;j<COLONNES+2;j++){
            if(i == 0) cdv[i][j] = -1;
            else if(j == 0) cdv[i][j] = -1;
            else if(i == LIGNES+1) cdv[i][j] = -1;
            else if(j == COLONNES+1) cdv[i][j] = -1;
            else{
                cdv[i][j] = d->plateau[i-1][j-1];
            }
        }
    }
    int flag=0; // Drapeau de bloquage, passe à -1 si on trouve un mouvement
    for (int i=1; i<=LIGNES; i++){
        for (int j=1; j<=COLONNES; j++){
            if (tour%2==0 && cdv[i][j]==PION_BLANC){
                for (int k=-1; k<=1; k+=2){
                    for (int l=-1; l<=1; l+=2){
                        if ((cdv[i+k][j+l]==PION_NOIR && cdv[i+2*k][j+2*l]==VIDE) || cdv[i+k][j+l]==VIDE){
                            flag=-1;
                        }
                    }
                }
            }
            else if (tour%2==1 && cdv[i][j]==PION_NOIR){
                for (int k=-1; k<=1; k+=2){
                    for (int l=-1; l<=1; l+=2){
                        if ((cdv[i+k][j+l]==PION_BLANC && cdv[i+2*k][j+2*l]==VIDE) || cdv[i+k][j+l]==VIDE){
                            flag=-1;
                        }
                    }
                }
            }
        }
    }
    return flag;
}

int victoire(int tour, PDamier d){
    /* fonction temporaire , -1 si pas victoire*/
    if (plusDePieces(tour,d) == -1){
        return bloque(tour,d);
    }
    return 0;
}

int abandon(char* input, int tour){
    /* retourne 0 si le joueur abandonne, -1 sinon */
    char abandon[] = "abandon";
    int flag = 0;
    for(int i=0;i<7;i++){
        if(input[i] != abandon[i])
            flag = -1;
    }
    if(flag == 0){
        if(tour%2 == 0){ // abandon des blancs
            printf("Le joueur blanc a abandonné !\n");
        }
        if(tour%2 == 1){ // abandon des noirs
            printf("Le joueur noir a abandonné !\n");
        }
    }
    return flag;
}

int jeu(PDamier d){
    int tour = 0;
    afficher_damier(d);
    //while(victoire(tour, d) == -1){
    while(1){
        //TODO : vérifier prise (automatique)
        char input[MAX_INPUT];
        printf("Tour : %i\n", tour%2);
        printf("Syntaxe des coups : CASE_DE_DEPART CASE_ARRIVEE (ex : A1 B9)\n");
        printf("Coup à jouer : ");
        fgets(input,MAX_INPUT,stdin);
        if(abandon(input,tour) == 0){ // abandon du joueur
            return 0;
        }
        while(checkInput(input) == -1){ // tant que input pas OK
            printf("Coup à jouer : ");
            fgets(input,MAX_INPUT,stdin);
        }
        while(choisir_deplacement(d,envoyerInput(input),tour%2) == -1){
            printf("Coup à jouer : ");
            fgets(input,MAX_INPUT,stdin);
            while(checkInput(input) == -1){ // tant que input pas OK
                printf("Coup à jouer : ");
                fgets(input,MAX_INPUT,stdin);
            }
        }
        update_damier(d);
        tour++;
    }
    if(tour%2 == 0){
        printf("Les noirs ont gagné !\n");
    }
    else{
        printf("Les blancs ont gagné !\n");
    }
    return 0;
}

/*
int trouverCoup(PDamier jeu,int couleur){
     int i=0,nbPion=0,nbPionMax;
     if(couleur==1) nbPionMax=jeu->nb_blancs+jeu->nb_dblanc; //nbPion dans le plateau
     else if(couleur==2) nbPionMax=jeu->nb_noirs+jeu->nb_dnoir;
     while(nbPion<nbPionMax){
         for(int j=0;j<10;j++){
          if(jeu->plateau[i][j] == couleur) {
              if(test_dep(jeu,i,j,couleur) ==0){
                  return 0;
              }
             nbPion++;

            }
          else if(jeu->plateau[i][j]== 2*couleur) {
                    if(test_depDame(jeu,i,j) ==1){
                  return 0;
              }
               nbPion++;
                   }
          i++;
         }
}
   return -1;

}


void finJeu(PDamier jeu,int couleur, int tour){
    if(plusDePieces(tour,jeu)==0) printf("FIN DE PARTIE ,PLUS DE PIECES :(\n");
    //TODO : implementer trouver un coup
    if(trouverCoup(jeu,couleur)==-1) {
       printf("FIN DE PARTIE :(\n");
       if(couleur==1) printf("Aucun deplacement possible pour les noirs\n");
       else if (couleur==0) printf("aucun deplacement possible pour les blancs\n");
 }
}
*/
