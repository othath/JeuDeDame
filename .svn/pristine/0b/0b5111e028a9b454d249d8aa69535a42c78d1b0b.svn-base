#include "constantes.h"

int mv_normal(int code[4], PDamier damier, int tour){
    switch(damier->plateau[code[1]][code[0]]){
        case VIDE:
            printf("Erreur, case de départ vide !\n");
            return -1;
        case PION_BLANC:
            if(tour==1){
                printf("Erreur, ce n'est pas votre tour !\n");
                return -1;
            }
            if(code[3]==code[1]-1 && (code[2]==code[0]-1 || code[2]==code[0]+1) && damier->plateau[code[3]][code[2]] == VIDE){
                damier->plateau[code[1]][code[0]]=VIDE;
                damier->plateau[code[3]][code[2]]=PION_BLANC;
                return 0;
            }
            else{
                printf("Erreur, case d'arrivée non  valide !\n");
                return -1;
            }
        case PION_NOIR:
            if(tour==0){
                printf("Erreur, ce n'est pas votre tour !\n");
                return -1;
            }
            if(code[3]==code[1]+1 && (code[2]==code[0]-1 || code[2]==code[0]+1) && damier->plateau[code[3]][code[2]] == VIDE){
                damier->plateau[code[1]][code[0]]=VIDE;
                damier->plateau[code[3]][code[2]]=PION_NOIR;
                return 0;
            }
            else{
                printf("Erreur, case d'arrivée non  valide !\n");
                return -1;
            }
        default:
            printf("Erreur inconnue !\n");
            return -1;
    }
}

void dame(PDamier plateau){
    /* transforme un pion en Dame */
	for(int i=0; i<COLONNES; i++){
		if(plateau->plateau[9][i]==PION_NOIR){
			plateau->plateau[9][i]=DAME_NOIRE;
		}
		if(plateau->plateau[0][i]==PION_BLANC){
			plateau->plateau[0][i]=DAME_BLANCHE;
		}
	}
}

int prise(PDamier plateau, int t, int position[4]){
    /* fonction pour effectuer une prise
     x = ligne et y = colonne */
     int x1 = position[1];
     int y1 = position[0];
     int x2 = position[3];
     int y2 = position[2];
     int diff_x = (x2-x1)/2;
     int diff_y = (y2-y1)/2;
     if(plateau->plateau[x2][y2] == 0){
		if(plateau->plateau[x1+diff_x][y1+diff_y]==PION_NOIR){	//si c'est le tour des blancs alors on peut faire une prise noir
            if (t==0){
                plateau->plateau[x1+diff_x][y1+diff_y] = VIDE;
                plateau->plateau[x1][y1] = VIDE;
                plateau->nb_noirs--;
                plateau->plateau[x2][y2] = PION_BLANC;
                return 0;
            }
            else{
                printf("ERREUR: ce n'est pas votre pièce!\n");
                return -1;
            }
		}
		if(plateau->plateau[x1+diff_x][y1+diff_y]==PION_BLANC){ // tour des noirs
			if (t==1){
                plateau->plateau[x1+diff_x][y1+diff_y] = VIDE;
                plateau->plateau[x1][y1] = VIDE;
                plateau->nb_blancs--;
                plateau->plateau[x2][y2] = PION_NOIR;
                return 0;
			}
			else{
                printf("ERREUR: ce n'est pas votre pièce!\n");
                return -1;
			}
		}
        else{
            return -1;
        }
	}
	else{
		printf("Case d'arriver non vide \n");
		return -1;
	}
}

int depDame(int code[4], PDamier damier, int tour){ //TODO : tester si on peut deplacer une DAME
    if ((tour==0 && damier->plateau[code[0]][code[1]]==20) || (tour==1 && damier->plateau[code[0]][code[1]]==10)){
        printf("ERREUR: Ce n'est pas votre pièce!\n");
        return -1;
    }
    int hg=fmin(code[0],code[1]);
    int hd=fmin(code[0],COLONNES-1-code[1]);
    int bg=fmin(LIGNES-1-code[0],code[1]);
    int bd=fmin(LIGNES-1-code[0],COLONNES-1-code[1]);
    for (int i=0; i<=hg; i++){
        if (code[0]-i==code[2] && code[1]-i==code[3]){
            if(damier->plateau[code[2]][code[3]]==VIDE){
                if (damier->plateau[0][1]==DAME_BLANCHE){
                    damier->plateau[0][1]=VIDE;
                    damier->plateau[2][3]=DAME_BLANCHE;
                    return 0;
                }
                else{
                    damier->plateau[0][1]=VIDE;
                    damier->plateau[2][3]=DAME_NOIRE;
                    return 0;
                }
            }
            else{
                printf("ERREUR: Case d'arrivée non nule!");
                return -1;
            }
        }
    }
    for (int i=0; i<=hd; i++){
        if (code[0]-i==code[2] && code[1]+i==code[3]){
            if(damier->plateau[code[2]][code[3]]==VIDE){
                if (damier->plateau[0][1]==DAME_BLANCHE){
                    damier->plateau[0][1]=VIDE;
                    damier->plateau[2][3]=DAME_BLANCHE;
                    return 0;
                }
                else{
                    damier->plateau[0][1]=VIDE;
                    damier->plateau[2][3]=DAME_NOIRE;
                    return 0;
                }
            }
            else{
                printf("ERREUR: Case d'arrivée non nule!");
                return -1;
            }
        }
    }
    for (int i=0; i<=bg; i++){
        if (code[0]+i==code[2] && code[1]-i==code[3]){
            if(damier->plateau[code[2]][code[3]]==VIDE){
                if (damier->plateau[0][1]==DAME_BLANCHE){
                    damier->plateau[0][1]=VIDE;
                    damier->plateau[2][3]=DAME_BLANCHE;
                    return 0;
                }
                else{
                    damier->plateau[0][1]=VIDE;
                    damier->plateau[2][3]=DAME_NOIRE;
                    return 0;
                }
            }
            else{
                printf("ERREUR: Case d'arrivée non nule!");
                return -1;
            }
        }
    }
    for (int i=0; i<=bd; i++){
        if (code[0]+i==code[2] && code[1]+i==code[3]){
            if(damier->plateau[code[2]][code[3]]==VIDE){
                if (damier->plateau[0][1]==DAME_BLANCHE){
                    damier->plateau[0][1]=VIDE;
                    damier->plateau[2][3]=DAME_BLANCHE;
                    return 0;
                }
                else{
                    damier->plateau[0][1]=VIDE;
                    damier->plateau[2][3]=DAME_NOIRE;
                    return 0;
                }
            }
            else{
                printf("ERREUR: Case d'arrivée non nule!");
                return -1;
            }
        }
    }
    printf("ERREUR: case d'arrivée non valide!\n");
    return -1;
}

int choisir_deplacement(PDamier damier, int code[4], int tour){
    int dep=abs(code[3]-code[1]); // Nombre de cases de déplacement
    switch (dep){
        case 1:
            if(damier->plateau[code[0]][code[1]] == PION_NOIR || damier->plateau[code[0]][code[1]] == PION_BLANC || damier->plateau[code[0]][code[1]] == 0){
                return mv_normal(code, damier, tour);
            }
            else{ // dame
                return depDame(code, damier, tour);
            }
        case 2:
            return prise(damier, tour, code);
        default:
            return depDame(code, damier, tour);
    }
}
